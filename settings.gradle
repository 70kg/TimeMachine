include ':timemachine'
include ':timemachine-store'
include ':timemachine-widget'
include ':multitype'
include ':transformer'

project(':multitype').projectDir = new File(rootProject.projectDir, '../MultiType/library')

gradle.ext.supportLibraryVersion = '24.2.1'
gradle.ext.ageraVersion = '1.2.0-beta2'
gradle.ext.leakCanaryVersion = '1.4-beta2'
gradle.ext.crashwoodpeckerVersion = '1.3.2'
gradle.ext.buildToolsVersion = '24.0.2'

gradle.allprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                lintOptions {
                    abortOnError false
                    textReport true
                    textOutput 'stdout'
                    checkAllWarnings true
                }
            }
            dependencies {
                compile 'com.android.support:support-annotations:' + gradle.supportLibraryVersion
                testCompile 'junit:junit:4.12'
                testCompile 'org.mockito:mockito-core:1.10.19'
            }
            task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports"
                def fileFilter = ['**/R.class', '**/R$*.class', '**/BR.class',
                                  '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
                def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug",
                        excludes: fileFilter)
                def mainSrc = "${project.projectDir}/src/main/java"

                sourceDirectories = files([mainSrc])
                classDirectories = files([debugTree])
                additionalSourceDirs = files(["${buildDir}/generated/source/buildConfig/debug",
                                              "${buildDir}/generated/source/r/debug"])
                executionData =
                        fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

                reports {
                    xml.enabled = true
                    xml.destination = "${buildDir}/jacocoTestReport.xml"
                    csv.enabled = false
                    html.enabled = true
                    html.destination = "${buildDir}/reports/jacoco"
                }
            }
        }
    }
}