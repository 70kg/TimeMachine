apply plugin: 'com.android.application'
// apply plugin: 'org.moallemi.advanced-build-version'
apply plugin: 'jacoco'

/*
advancedVersioning {
    nameOptions {
        versionPatch versionCode
    }
    codeOptions {
        versionCodeType VersionCodeType.AUTO_INCREMENT_ONE_STEP
        dependsOnTasks 'assemble'
    }
    outputOptions {
        renameOutput false
        nameFormat 'Transformer-${buildType}-${versionName}'
    }
}
*/

// def appVersionName = advancedVersioning.versionName
// def appVersionCode = advancedVersioning.versionCode
def keyStore = file('transformer.keystore')

android {
    compileSdkVersion 25
    buildToolsVersion gradle.buildToolsVersion

    defaultConfig {
        applicationId "me.drakeet.transformer"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 527
        versionName 'x.xx'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dexOptions {
        dexInProcess = true
    }

    compileOptions {
        incremental = true
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    signingConfigs {
        app {
            storeFile file('transformer.keystore')
            storePassword project.hasProperty('STOREPASS') ? STOREPASS : ''
            keyAlias project.hasProperty('KEYALIAS') ? KEYALIAS : ''
            keyPassword project.hasProperty('KEYPASS') ? KEYPASS : ''
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            debuggable true
            applicationIdSuffix ".debug"
        }

        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile 'proguard-android-patch.pro'
            proguardFile 'proguard-rules.pro'

            if (keyStore.exists()) {
                println "transformer: using drakeet's key"
                signingConfig signingConfigs.app
            } else {
                println "transformer: using default key"
                signingConfig signingConfigs.debug
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':timemachine')
    implementation project(':timemachine-widget')
    implementation project(':timemachine-store')
    implementation "com.android.support:appcompat-v7:$gradle.supportLibraryVersion"
    implementation "com.android.support:design:$gradle.supportLibraryVersion"

    implementation "com.google.android.agera:agera:$gradle.ageraVersion"
    implementation "com.google.android.agera:net:$gradle.ageraVersion"
    implementation "com.google.android.agera:content:$gradle.ageraVersion"
    implementation 'me.drakeet.agera:bus:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.1'

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$gradle.leakCanaryVersion"
    debugImplementation ("me.drakeet.library:crashwoodpecker:$gradle.crashwoodpeckerVersion", {
        exclude group: 'com.android.support'
    })

    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$gradle.leakCanaryVersion"
    releaseImplementation "me.drakeet.library:crashwoodpecker-do-nothing:$gradle.crashwoodpeckerVersion"

    androidTestImplementation "com.android.support:appcompat-v7:$gradle.supportLibraryVersion"
    androidTestImplementation "com.android.support:design:$gradle.supportLibraryVersion"

    implementation 'com.android.support.test.espresso:espresso-idling-resource:2.2.2'

    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test:rules:0.5'
}
